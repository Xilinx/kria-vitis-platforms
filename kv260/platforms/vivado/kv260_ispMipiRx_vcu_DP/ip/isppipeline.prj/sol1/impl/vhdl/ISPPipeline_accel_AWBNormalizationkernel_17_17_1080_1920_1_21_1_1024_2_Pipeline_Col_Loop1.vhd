-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_AWBNormalizationkernel_17_17_1080_1920_1_21_1_1024_2_Pipeline_Col_Loop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    impop_data1_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    impop_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    impop_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    impop_data1_empty_n : IN STD_LOGIC;
    impop_data1_read : OUT STD_LOGIC;
    ltm_in_data242_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    ltm_in_data242_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ltm_in_data242_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ltm_in_data242_full_n : IN STD_LOGIC;
    ltm_in_data242_write : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (10 downto 0);
    empty_100 : IN STD_LOGIC_VECTOR (17 downto 0);
    conv7_i184 : IN STD_LOGIC_VECTOR (25 downto 0);
    empty_101 : IN STD_LOGIC_VECTOR (17 downto 0);
    conv7_i184_1 : IN STD_LOGIC_VECTOR (25 downto 0);
    empty : IN STD_LOGIC_VECTOR (17 downto 0);
    conv7_i184_2 : IN STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of ISPPipeline_accel_AWBNormalizationkernel_17_17_1080_1920_1_21_1_1024_2_Pipeline_Col_Loop1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln377_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal impop_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ltm_in_data242_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv7_i184_2_cast_fu_157_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal conv7_i184_2_cast_reg_599 : STD_LOGIC_VECTOR (43 downto 0);
    signal conv7_i184_1_cast_fu_161_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal conv7_i184_1_cast_reg_604 : STD_LOGIC_VECTOR (43 downto 0);
    signal conv7_i184_cast_fu_165_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal conv7_i184_cast_reg_609 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln859_fu_194_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln859_reg_618 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_reg_623 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_reg_628 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_reg_648 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln260_fu_353_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln260_reg_653 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_reg_658 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln260_5_fu_432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln260_5_reg_663 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_reg_668 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln260_6_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln260_6_reg_673 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_fu_520_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_reg_678 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_3_fu_532_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_3_reg_683 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_4_fu_544_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_4_reg_688 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_V_fu_98 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_V_4_fu_183_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_V_3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_218_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln859_fu_225_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal value_V_fu_229_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln859_1_fu_238_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln859_1_fu_245_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal value_V_1_fu_249_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln859_2_fu_258_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln859_2_fu_265_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal value_V_2_fu_269_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_s_fu_278_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_287_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln1319_1_fu_299_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1319_fu_295_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln1319_1_fu_307_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_14_fu_311_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_59_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_fu_317_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal dstval_V_fu_335_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_14_fu_357_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1319_2_fu_366_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln1319_3_fu_378_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1319_2_fu_374_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln1319_3_fu_386_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_17_fu_390_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_61_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_1_fu_396_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal dstval_V_2_fu_414_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_16_fu_436_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1319_4_fu_445_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln1319_5_fu_457_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1319_4_fu_453_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln1319_5_fu_465_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_469_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_63_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_2_fu_475_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal dstval_V_3_fu_493_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln44_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_559_ce : STD_LOGIC;
    signal grp_fu_565_ce : STD_LOGIC;
    signal grp_fu_571_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mul_mul_26s_18s_44_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_26s_18s_44_4_1_U294 : component ISPPipeline_accel_mul_mul_26s_18s_44_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 26,
        din1_WIDTH => 18,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_559_p0,
        din1 => value_V_fu_229_p2,
        ce => grp_fu_559_ce,
        dout => grp_fu_559_p2);

    mul_mul_26s_18s_44_4_1_U295 : component ISPPipeline_accel_mul_mul_26s_18s_44_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 26,
        din1_WIDTH => 18,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => value_V_1_fu_249_p2,
        ce => grp_fu_565_ce,
        dout => grp_fu_565_p2);

    mul_mul_26s_18s_44_4_1_U296 : component ISPPipeline_accel_mul_mul_26s_18s_44_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 26,
        din1_WIDTH => 18,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_571_p0,
        din1 => value_V_2_fu_269_p2,
        ce => grp_fu_571_ce,
        dout => grp_fu_571_p2);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    col_V_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln377_fu_177_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col_V_fu_98 <= col_V_4_fu_183_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_V_fu_98 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv7_i184_1_cast_reg_604 <= conv7_i184_1_cast_fu_161_p1;
                conv7_i184_2_cast_reg_599 <= conv7_i184_2_cast_fu_157_p1;
                conv7_i184_cast_reg_609 <= conv7_i184_cast_fu_165_p1;
                tmp_13_reg_623 <= impop_data1_dout(19 downto 10);
                tmp_15_reg_628 <= impop_data1_dout(29 downto 20);
                trunc_ln859_reg_618 <= trunc_ln859_fu_194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                select_ln260_3_reg_683 <= select_ln260_3_fu_532_p3;
                select_ln260_4_reg_688 <= select_ln260_4_fu_544_p3;
                select_ln260_reg_678 <= select_ln260_fu_520_p3;
                tmp_60_reg_648 <= dstval_V_fu_335_p3(24 downto 10);
                tmp_62_reg_658 <= dstval_V_2_fu_414_p3(24 downto 10);
                tmp_64_reg_668 <= dstval_V_3_fu_493_p3(24 downto 10);
                trunc_ln260_5_reg_663 <= trunc_ln260_5_fu_432_p1;
                trunc_ln260_6_reg_673 <= trunc_ln260_6_fu_511_p1;
                trunc_ln260_reg_653 <= trunc_ln260_fu_353_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, impop_data1_empty_n, ltm_in_data242_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ltm_in_data242_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((impop_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, impop_data1_empty_n, ltm_in_data242_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ltm_in_data242_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((impop_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, impop_data1_empty_n, ltm_in_data242_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ltm_in_data242_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((impop_data1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(impop_data1_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (impop_data1_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(ltm_in_data242_full_n)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (ltm_in_data242_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln377_fu_177_p2)
    begin
        if (((icmp_ln377_fu_177_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_V_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_V_fu_98, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_col_V_3 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_col_V_3 <= col_V_fu_98;
        end if; 
    end process;

    col_V_4_fu_183_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_V_3) + unsigned(ap_const_lv11_1));
        conv7_i184_1_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i184_1),44));

        conv7_i184_2_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i184_2),44));

        conv7_i184_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i184),44));

    dstval_V_2_fu_414_p3 <= 
        ap_const_lv25_0 when (tmp_61_fu_406_p3(0) = '1') else 
        finalmul_V_1_fu_396_p4;
    dstval_V_3_fu_493_p3 <= 
        ap_const_lv25_0 when (tmp_63_fu_485_p3(0) = '1') else 
        finalmul_V_2_fu_475_p4;
    dstval_V_fu_335_p3 <= 
        ap_const_lv25_0 when (tmp_59_fu_327_p3(0) = '1') else 
        finalmul_V_fu_317_p4;
    finalmul_V_1_fu_396_p4 <= r_V_17_fu_390_p2(48 downto 24);
    finalmul_V_2_fu_475_p4 <= r_V_20_fu_469_p2(48 downto 24);
    finalmul_V_fu_317_p4 <= r_V_14_fu_311_p2(48 downto 24);

    grp_fu_559_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_559_ce <= ap_const_logic_1;
        else 
            grp_fu_559_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_559_p0 <= conv7_i184_cast_reg_609(26 - 1 downto 0);

    grp_fu_565_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_565_ce <= ap_const_logic_1;
        else 
            grp_fu_565_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_565_p0 <= conv7_i184_1_cast_reg_604(26 - 1 downto 0);

    grp_fu_571_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_571_ce <= ap_const_logic_1;
        else 
            grp_fu_571_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_571_p0 <= conv7_i184_2_cast_reg_599(26 - 1 downto 0);
    icmp_ln377_fu_177_p2 <= "1" when (ap_sig_allocacmp_col_V_3 = p_read1) else "0";
    icmp_ln44_1_fu_527_p2 <= "1" when (signed(tmp_62_reg_658) > signed(ap_const_lv15_0)) else "0";
    icmp_ln44_2_fu_539_p2 <= "1" when (signed(tmp_64_reg_668) > signed(ap_const_lv15_0)) else "0";
    icmp_ln44_fu_515_p2 <= "1" when (signed(tmp_60_reg_648) > signed(ap_const_lv15_0)) else "0";

    impop_data1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, impop_data1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            impop_data1_blk_n <= impop_data1_empty_n;
        else 
            impop_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    impop_data1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            impop_data1_read <= ap_const_logic_1;
        else 
            impop_data1_read <= ap_const_logic_0;
        end if; 
    end process;


    ltm_in_data242_blk_n_assign_proc : process(ap_enable_reg_pp0_iter7, ltm_in_data242_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ltm_in_data242_blk_n <= ltm_in_data242_full_n;
        else 
            ltm_in_data242_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ltm_in_data242_din <= ((select_ln260_4_reg_688 & select_ln260_3_reg_683) & select_ln260_reg_678);

    ltm_in_data242_write_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ltm_in_data242_write <= ap_const_logic_1;
        else 
            ltm_in_data242_write <= ap_const_logic_0;
        end if; 
    end process;

    r_V_14_fu_311_p2 <= std_logic_vector(signed(sext_ln1319_fu_295_p1) - signed(sext_ln1319_1_fu_307_p1));
    r_V_17_fu_390_p2 <= std_logic_vector(signed(sext_ln1319_2_fu_374_p1) - signed(sext_ln1319_3_fu_386_p1));
    r_V_20_fu_469_p2 <= std_logic_vector(signed(sext_ln1319_4_fu_453_p1) - signed(sext_ln1319_5_fu_465_p1));
    select_ln260_3_fu_532_p3 <= 
        ap_const_lv10_3FF when (icmp_ln44_1_fu_527_p2(0) = '1') else 
        trunc_ln260_5_reg_663;
    select_ln260_4_fu_544_p3 <= 
        ap_const_lv10_3FF when (icmp_ln44_2_fu_539_p2(0) = '1') else 
        trunc_ln260_6_reg_673;
    select_ln260_fu_520_p3 <= 
        ap_const_lv10_3FF when (icmp_ln44_fu_515_p2(0) = '1') else 
        trunc_ln260_reg_653;
        sext_ln1319_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_1_fu_299_p3),49));

        sext_ln1319_2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_2_fu_366_p3),49));

        sext_ln1319_3_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_3_fu_378_p3),49));

        sext_ln1319_4_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_4_fu_445_p3),49));

        sext_ln1319_5_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_5_fu_457_p3),49));

        sext_ln1319_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln5_fu_287_p3),49));

    shl_ln1319_1_fu_299_p3 <= (tmp_s_fu_278_p4 & ap_const_lv6_0);
    shl_ln1319_2_fu_366_p3 <= (tmp_14_fu_357_p4 & ap_const_lv16_0);
    shl_ln1319_3_fu_378_p3 <= (tmp_14_fu_357_p4 & ap_const_lv6_0);
    shl_ln1319_4_fu_445_p3 <= (tmp_16_fu_436_p4 & ap_const_lv16_0);
    shl_ln1319_5_fu_457_p3 <= (tmp_16_fu_436_p4 & ap_const_lv6_0);
    shl_ln5_fu_287_p3 <= (tmp_s_fu_278_p4 & ap_const_lv16_0);
    shl_ln859_1_fu_238_p3 <= (tmp_13_reg_623 & ap_const_lv6_0);
    shl_ln859_2_fu_258_p3 <= (tmp_15_reg_628 & ap_const_lv6_0);
    shl_ln_fu_218_p3 <= (trunc_ln859_reg_618 & ap_const_lv6_0);
    tmp_14_fu_357_p4 <= grp_fu_565_p2(43 downto 12);
    tmp_16_fu_436_p4 <= grp_fu_571_p2(43 downto 12);
    tmp_59_fu_327_p3 <= r_V_14_fu_311_p2(48 downto 48);
    tmp_61_fu_406_p3 <= r_V_17_fu_390_p2(48 downto 48);
    tmp_63_fu_485_p3 <= r_V_20_fu_469_p2(48 downto 48);
    tmp_s_fu_278_p4 <= grp_fu_559_p2(43 downto 12);
    trunc_ln260_5_fu_432_p1 <= dstval_V_2_fu_414_p3(10 - 1 downto 0);
    trunc_ln260_6_fu_511_p1 <= dstval_V_3_fu_493_p3(10 - 1 downto 0);
    trunc_ln260_fu_353_p1 <= dstval_V_fu_335_p3(10 - 1 downto 0);
    trunc_ln859_fu_194_p1 <= impop_data1_dout(10 - 1 downto 0);
    value_V_1_fu_249_p2 <= std_logic_vector(unsigned(zext_ln859_1_fu_245_p1) - unsigned(empty_101));
    value_V_2_fu_269_p2 <= std_logic_vector(unsigned(zext_ln859_2_fu_265_p1) - unsigned(empty));
    value_V_fu_229_p2 <= std_logic_vector(unsigned(zext_ln859_fu_225_p1) - unsigned(empty_100));
    zext_ln859_1_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln859_1_fu_238_p3),18));
    zext_ln859_2_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln859_2_fu_258_p3),18));
    zext_ln859_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_218_p3),18));
end behav;
