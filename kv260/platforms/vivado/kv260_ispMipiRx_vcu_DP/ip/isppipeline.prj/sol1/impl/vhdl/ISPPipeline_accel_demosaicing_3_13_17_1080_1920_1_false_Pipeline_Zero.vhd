-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_demosaicing_3_13_17_1080_1920_1_false_Pipeline_Zero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgblock_V_17_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_12_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_11_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_7_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_17_1_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_17_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_12_1_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_12_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_11_1_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_11_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_7_1_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgblock_V_7_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ISPPipeline_accel_demosaicing_3_13_17_1080_1920_1_false_Pipeline_Zero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln318_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_fu_52 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln318_fu_158_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgblock_V_7_1_fu_56 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln323_4_fu_250_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_V_11_1_fu_60 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln323_1_fu_202_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_V_12_1_fu_64 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln323_3_fu_242_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_V_17_1_fu_68 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln323_2_fu_234_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln323_fu_176_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln323_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln323_fu_194_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln323_2_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln323_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln323_1_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    imgblock_V_11_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_11_1_fu_60 <= imgblock_V_11_0;
                elsif (((icmp_ln318_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_11_1_fu_60 <= select_ln323_1_fu_202_p3;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_12_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_12_1_fu_64 <= imgblock_V_12_0;
                elsif (((icmp_ln318_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_12_1_fu_64 <= select_ln323_3_fu_242_p3;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_17_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_17_1_fu_68 <= imgblock_V_17_0;
                elsif (((icmp_ln318_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_17_1_fu_68 <= select_ln323_2_fu_234_p3;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_7_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_7_1_fu_56 <= imgblock_V_7_0;
                elsif (((icmp_ln318_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_7_1_fu_56 <= select_ln323_4_fu_250_p3;
                end if;
            end if; 
        end if;
    end process;

    p_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_fu_52 <= ap_const_lv3_0;
                elsif (((icmp_ln318_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_fu_52 <= add_ln318_fu_158_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln318_fu_158_p2 <= std_logic_vector(unsigned(p_fu_52) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln318_fu_152_p2)
    begin
        if (((icmp_ln318_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln318_fu_152_p2 <= "1" when (p_fu_52 = ap_const_lv3_4) else "0";
    icmp_ln323_1_fu_210_p2 <= "1" when (trunc_ln323_fu_176_p1 = ap_const_lv2_0) else "0";
    icmp_ln323_2_fu_216_p2 <= "1" when (trunc_ln323_fu_176_p1 = ap_const_lv2_1) else "0";
    icmp_ln323_fu_188_p2 <= "1" when (trunc_ln323_fu_176_p1 = ap_const_lv2_2) else "0";
    imgblock_V_11_1_out <= imgblock_V_11_1_fu_60;

    imgblock_V_11_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_152_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_11_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_11_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_12_1_out <= imgblock_V_12_1_fu_64;

    imgblock_V_12_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_152_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_12_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_12_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_17_1_out <= imgblock_V_17_1_fu_68;

    imgblock_V_17_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_152_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_17_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_17_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_7_1_out <= imgblock_V_7_1_fu_56;

    imgblock_V_7_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_152_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_7_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_7_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln323_1_fu_228_p2 <= (or_ln323_fu_222_p2 or icmp_ln323_1_fu_210_p2);
    or_ln323_fu_222_p2 <= (icmp_ln323_fu_188_p2 or icmp_ln323_2_fu_216_p2);
    select_ln323_1_fu_202_p3 <= 
        select_ln323_fu_194_p3 when (tmp_fu_180_p3(0) = '1') else 
        imgblock_V_11_1_fu_60;
    select_ln323_2_fu_234_p3 <= 
        imgblock_V_17_1_fu_68 when (or_ln323_1_fu_228_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln323_3_fu_242_p3 <= 
        ap_const_lv10_0 when (icmp_ln323_fu_188_p2(0) = '1') else 
        imgblock_V_12_1_fu_64;
    select_ln323_4_fu_250_p3 <= 
        ap_const_lv10_0 when (icmp_ln323_2_fu_216_p2(0) = '1') else 
        imgblock_V_7_1_fu_56;
    select_ln323_fu_194_p3 <= 
        ap_const_lv10_0 when (icmp_ln323_fu_188_p2(0) = '1') else 
        imgblock_V_11_1_fu_60;
    tmp_fu_180_p3 <= p_fu_52(1 downto 1);
    trunc_ln323_fu_176_p1 <= p_fu_52(2 - 1 downto 0);
end behav;
