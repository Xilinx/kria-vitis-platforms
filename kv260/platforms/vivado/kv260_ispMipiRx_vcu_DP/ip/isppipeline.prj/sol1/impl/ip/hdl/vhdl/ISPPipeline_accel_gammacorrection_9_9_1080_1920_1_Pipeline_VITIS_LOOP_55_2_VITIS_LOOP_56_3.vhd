-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_gammacorrection_9_9_1080_1920_1_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gamma_lut_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    gamma_lut_ce0 : OUT STD_LOGIC;
    gamma_lut_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_p_ce0 : OUT STD_LOGIC;
    lut_p_we0 : OUT STD_LOGIC;
    lut_p_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_p_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_p_1_ce0 : OUT STD_LOGIC;
    lut_p_1_we0 : OUT STD_LOGIC;
    lut_p_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_p_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_p_2_ce0 : OUT STD_LOGIC;
    lut_p_2_we0 : OUT STD_LOGIC;
    lut_p_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ISPPipeline_accel_gammacorrection_9_9_1080_1920_1_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1073_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln42_fu_170_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln42_reg_264 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln42_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln42_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln42_1_fu_184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_1_reg_270 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_1_reg_270_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_1_reg_270_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal j_V_fu_192_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_reg_275 : STD_LOGIC_VECTOR (8 downto 0);
    signal gamma_lut_load_reg_285 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln587_3_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln587_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_fu_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_rhs_load : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_V_fu_68 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_k_V_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1073_fu_152_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1073_1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln886_fu_178_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal lhs_mid2_fu_208_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1541_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_218_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1073_fu_146_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_72 <= add_ln1073_fu_152_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_72 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    k_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1073_fu_146_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_V_fu_68 <= select_ln42_1_fu_184_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_V_fu_68 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    rhs_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_fu_64 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    rhs_fu_64 <= j_V_reg_275;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln42_1_reg_270_pp0_iter1_reg <= select_ln42_1_reg_270;
                select_ln42_reg_264_pp0_iter1_reg <= select_ln42_reg_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                gamma_lut_load_reg_285 <= gamma_lut_q0;
                select_ln42_1_reg_270_pp0_iter2_reg <= select_ln42_1_reg_270_pp0_iter1_reg;
                select_ln42_reg_264_pp0_iter2_reg <= select_ln42_reg_264_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_146_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_V_reg_275 <= j_V_fu_192_p2;
                select_ln42_1_reg_270 <= select_ln42_1_fu_184_p3;
                select_ln42_reg_264 <= select_ln42_fu_170_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1073_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln886_fu_178_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_V_load) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1073_fu_146_p2)
    begin
        if (((icmp_ln1073_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_k_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_V_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_V_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_k_V_load <= k_V_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_V_reg_275, ap_block_pp0_stage0, rhs_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_rhs_load <= ap_const_lv9_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_rhs_load <= j_V_reg_275;
            else 
                ap_sig_allocacmp_rhs_load <= rhs_fu_64;
            end if;
        else 
            ap_sig_allocacmp_rhs_load <= rhs_fu_64;
        end if; 
    end process;

    gamma_lut_address0 <= zext_ln587_3_fu_224_p1(10 - 1 downto 0);

    gamma_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gamma_lut_ce0 <= ap_const_logic_1;
        else 
            gamma_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1073_1_fu_164_p2 <= "1" when (ap_sig_allocacmp_rhs_load = ap_const_lv9_100) else "0";
    icmp_ln1073_fu_146_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_300) else "0";
    j_V_fu_192_p2 <= std_logic_vector(unsigned(select_ln42_fu_170_p3) + unsigned(ap_const_lv9_1));
    lhs_mid2_fu_208_p3 <= (select_ln42_1_reg_270 & ap_const_lv8_0);
    lut_p_1_address0 <= zext_ln587_fu_233_p1(8 - 1 downto 0);

    lut_p_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_1_ce0 <= ap_const_logic_1;
        else 
            lut_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_p_1_d0 <= gamma_lut_load_reg_285;

    lut_p_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln42_1_reg_270_pp0_iter2_reg)
    begin
        if (((select_ln42_1_reg_270_pp0_iter2_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_1_we0 <= ap_const_logic_1;
        else 
            lut_p_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_p_2_address0 <= zext_ln587_fu_233_p1(8 - 1 downto 0);

    lut_p_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_2_ce0 <= ap_const_logic_1;
        else 
            lut_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_p_2_d0 <= gamma_lut_load_reg_285;

    lut_p_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln42_1_reg_270_pp0_iter2_reg)
    begin
        if ((not((select_ln42_1_reg_270_pp0_iter2_reg = ap_const_lv2_0)) and not((select_ln42_1_reg_270_pp0_iter2_reg = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_2_we0 <= ap_const_logic_1;
        else 
            lut_p_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_p_address0 <= zext_ln587_fu_233_p1(8 - 1 downto 0);

    lut_p_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_ce0 <= ap_const_logic_1;
        else 
            lut_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_p_d0 <= gamma_lut_load_reg_285;

    lut_p_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln42_1_reg_270_pp0_iter2_reg)
    begin
        if (((select_ln42_1_reg_270_pp0_iter2_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lut_p_we0 <= ap_const_logic_1;
        else 
            lut_p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_218_p2 <= std_logic_vector(unsigned(lhs_mid2_fu_208_p3) + unsigned(zext_ln1541_fu_215_p1));
    select_ln42_1_fu_184_p3 <= 
        add_ln886_fu_178_p2 when (icmp_ln1073_1_fu_164_p2(0) = '1') else 
        ap_sig_allocacmp_k_V_load;
    select_ln42_fu_170_p3 <= 
        ap_const_lv9_0 when (icmp_ln1073_1_fu_164_p2(0) = '1') else 
        ap_sig_allocacmp_rhs_load;
    zext_ln1541_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_reg_264),10));
    zext_ln587_3_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_218_p2),64));
    zext_ln587_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_reg_264_pp0_iter2_reg),64));
end behav;
