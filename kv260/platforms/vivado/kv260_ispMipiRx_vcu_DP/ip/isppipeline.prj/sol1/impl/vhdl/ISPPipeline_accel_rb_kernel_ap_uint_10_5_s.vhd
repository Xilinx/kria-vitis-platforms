-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_rb_kernel_ap_uint_10_5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (9 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of ISPPipeline_accel_rb_kernel_ap_uint_10_5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

attribute shreg_extract : string;
    signal p_read413_reg_361 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_37_fu_148_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_37_reg_367 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_190_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_reg_373 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_reg_373_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln79_fu_262_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln79_reg_378 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln80_1_reg_388 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln80_2_reg_393 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln232_13_fu_116_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln232_fu_112_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_36_fu_120_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_fu_130_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_17_fu_134_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1541_fu_138_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_18_fu_144_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln232_14_fu_126_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln232_16_fu_158_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln232_15_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_38_fu_162_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_19_fu_172_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_20_fu_176_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1541_11_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1541_21_fu_186_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln232_17_fu_168_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_199_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_fu_206_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln74_fu_196_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln75_fu_210_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_216_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln4_fu_230_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln78_1_fu_241_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln78_1_fu_237_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln78_2_fu_248_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal t3_fu_252_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln78_fu_258_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln232_fu_226_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln3_fu_268_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln80_fu_279_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln78_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_fu_282_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln80_fu_296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln80_fu_322_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln80_1_fu_325_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln80_1_fu_331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal res_fu_334_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln79_fu_341_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln81_fu_353_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_read8_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln81_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
                p_read8_int_reg <= p_read8;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                p_read413_reg_361 <= p_read4_int_reg;
                ret_V_37_reg_367 <= ret_V_37_fu_148_p2;
                ret_V_reg_373 <= ret_V_fu_190_p2;
                ret_V_reg_373_pp0_iter1_reg <= ret_V_reg_373;
                sub_ln79_reg_378 <= sub_ln79_fu_262_p2;
                tmp_reg_383 <= add_ln80_fu_282_p2(15 downto 15);
                trunc_ln80_1_reg_388 <= sub_ln80_fu_296_p2(15 downto 3);
                trunc_ln80_2_reg_393 <= add_ln80_fu_282_p2(15 downto 3);
            end if;
        end if;
    end process;
    add_ln1541_11_fu_180_p2 <= std_logic_vector(unsigned(zext_ln1541_19_fu_172_p1) + unsigned(zext_ln1541_20_fu_176_p1));
    add_ln1541_fu_138_p2 <= std_logic_vector(unsigned(zext_ln1541_fu_130_p1) + unsigned(zext_ln1541_17_fu_134_p1));
    add_ln80_fu_282_p2 <= std_logic_vector(signed(sext_ln80_fu_279_p1) + signed(zext_ln78_fu_275_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln81_fu_353_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln81_fu_353_p3;
        else 
            ap_return <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    res_fu_334_p3 <= 
        sub_ln80_1_fu_325_p2 when (tmp_reg_383(0) = '1') else 
        zext_ln80_1_fu_331_p1;
    ret_V_36_fu_120_p2 <= std_logic_vector(unsigned(zext_ln232_13_fu_116_p1) + unsigned(zext_ln232_fu_112_p1));
    ret_V_37_fu_148_p2 <= std_logic_vector(unsigned(zext_ln1541_18_fu_144_p1) + unsigned(zext_ln232_14_fu_126_p1));
    ret_V_38_fu_162_p2 <= std_logic_vector(unsigned(zext_ln232_16_fu_158_p1) + unsigned(zext_ln232_15_fu_154_p1));
    ret_V_fu_190_p2 <= std_logic_vector(unsigned(zext_ln1541_21_fu_186_p1) + unsigned(zext_ln232_17_fu_168_p1));
    select_ln81_fu_353_p3 <= 
        ap_const_lv13_0 when (tmp_44_fu_345_p3(0) = '1') else 
        trunc_ln79_fu_341_p1;
        sext_ln232_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_216_p4),15));

        sext_ln78_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t3_fu_252_p2),15));

        sext_ln80_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln79_reg_378),16));

    shl_ln3_fu_268_p3 <= (ret_V_reg_373_pp0_iter1_reg & ap_const_lv1_0);
    shl_ln4_fu_230_p3 <= (p_read413_reg_361 & ap_const_lv3_0);
    shl_ln78_1_fu_241_p3 <= (p_read413_reg_361 & ap_const_lv1_0);
    shl_ln_fu_199_p3 <= (ret_V_37_reg_367 & ap_const_lv2_0);
    sub_ln75_fu_210_p2 <= std_logic_vector(unsigned(zext_ln75_fu_206_p1) - unsigned(zext_ln74_fu_196_p1));
    sub_ln79_fu_262_p2 <= std_logic_vector(signed(sext_ln78_fu_258_p1) - signed(sext_ln232_fu_226_p1));
    sub_ln80_1_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln80_fu_322_p1));
    sub_ln80_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(add_ln80_fu_282_p2));
    t3_fu_252_p2 <= std_logic_vector(unsigned(zext_ln78_1_fu_237_p1) - unsigned(zext_ln78_2_fu_248_p1));
    tmp_44_fu_345_p3 <= res_fu_334_p3(13 downto 13);
    trunc_ln79_fu_341_p1 <= res_fu_334_p3(13 - 1 downto 0);
    trunc_ln_fu_216_p4 <= sub_ln75_fu_210_p2(14 downto 1);
    zext_ln1541_17_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read8_int_reg),11));
    zext_ln1541_18_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1541_fu_138_p2),12));
    zext_ln1541_19_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read6_int_reg),11));
    zext_ln1541_20_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read7_int_reg),11));
    zext_ln1541_21_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1541_11_fu_180_p2),12));
    zext_ln1541_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read5_int_reg),11));
    zext_ln232_13_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3_int_reg),11));
    zext_ln232_14_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_36_fu_120_p2),12));
    zext_ln232_15_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1_int_reg),11));
    zext_ln232_16_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2_int_reg),11));
    zext_ln232_17_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_38_fu_162_p2),12));
    zext_ln232_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_int_reg),11));
    zext_ln74_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_37_reg_367),15));
    zext_ln75_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_199_p3),15));
    zext_ln78_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_230_p3),14));
    zext_ln78_2_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln78_1_fu_241_p3),14));
    zext_ln78_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_268_p3),16));
    zext_ln80_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln80_2_reg_393),14));
    zext_ln80_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln80_1_reg_388),14));
end behav;
