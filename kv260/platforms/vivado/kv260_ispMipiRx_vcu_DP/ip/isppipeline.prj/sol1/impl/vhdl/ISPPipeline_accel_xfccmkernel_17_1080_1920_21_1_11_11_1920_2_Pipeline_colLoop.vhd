-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_xfccmkernel_17_1080_1920_21_1_11_11_1920_2_Pipeline_colLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ltm_in_data242_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    ltm_in_data242_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ltm_in_data242_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ltm_in_data242_empty_n : IN STD_LOGIC;
    ltm_in_data242_read : OUT STD_LOGIC;
    lsc_out_data243_din : OUT STD_LOGIC_VECTOR (29 downto 0);
    lsc_out_data243_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    lsc_out_data243_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    lsc_out_data243_full_n : IN STD_LOGIC;
    lsc_out_data243_write : OUT STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of ISPPipeline_accel_xfccmkernel_17_1080_1920_21_1_11_11_1920_2_Pipeline_colLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv39_1A916872 : STD_LOGIC_VECTOR (38 downto 0) := "000000000011010100100010110100001110010";
    constant ap_const_lv39_7FF69930BE : STD_LOGIC_VECTOR (38 downto 0) := "111111111110110100110010011000010111110";
    constant ap_const_lv39_12205BC0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010010001000000101101111000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv39_11E631F8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010001111001100011000111111000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_3FF : STD_LOGIC_VECTOR (15 downto 0) := "0000001111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv36_FFED5CFAA : STD_LOGIC_VECTOR (35 downto 0) := "111111111110110101011100111110101010";
    constant ap_const_lv36_FFE01A36E : STD_LOGIC_VECTOR (35 downto 0) := "111111111110000000011010001101101110";
    constant ap_const_lv33_1FFDE00D1 : STD_LOGIC_VECTOR (32 downto 0) := "111111111110111100000000011010001";
    constant ap_const_lv34_3FFB573EA : STD_LOGIC_VECTOR (33 downto 0) := "1111111111101101010111001111101010";
    constant ap_const_lv36_FFE63F141 : STD_LOGIC_VECTOR (35 downto 0) := "111111111110011000111111000101000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln245_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ltm_in_data242_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lsc_out_data243_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_V_fu_162_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_reg_777 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_V_fu_166_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_V_reg_782 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_V_fu_176_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_V_reg_787 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_V_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1316_4_fu_215_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_3_reg_828 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_reg_833 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_reg_843 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_853 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_858 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_12_fu_330_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_12_reg_863 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_15_fu_343_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_15_reg_868 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_18_fu_357_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_18_reg_873 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_14_fu_429_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_14_reg_878 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_17_fu_503_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_17_reg_883 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_20_fu_577_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_20_reg_888 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_reg_893 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_903 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln260_fu_649_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_reg_908 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_1_fu_682_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_1_reg_913 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_2_fu_715_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln260_2_reg_918 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_V_fu_114 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_2_fu_151_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_738_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln1393_fu_327_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1393_fu_324_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_9_fu_278_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1393_1_fu_340_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1393_3_fu_336_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_12_fu_296_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_305_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1393_7_fu_353_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1393_6_fu_349_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1393_1_fu_363_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1393_2_fu_366_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_13_fu_369_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_375_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1049_fu_397_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_401_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1048_fu_385_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1049_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_415_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_fu_421_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1393_4_fu_437_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1393_5_fu_440_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_16_fu_443_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_449_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1049_1_fu_471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_475_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1048_1_fu_459_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1049_1_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_489_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_1_fu_463_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_1_fu_495_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1393_8_fu_511_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln1393_2_fu_514_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_19_fu_517_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_7_fu_523_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1049_2_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_549_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1048_2_fu_533_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1049_2_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_10_fu_563_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_2_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1048_2_fu_569_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln97_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1029_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln97_fu_629_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln260_fu_645_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln97_1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1029_1_fu_618_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln97_1_fu_662_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_670_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln260_1_fu_678_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln97_2_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1029_2_fu_621_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln97_2_fu_695_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln260_2_fu_711_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_731_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_738_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_738_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_745_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_745_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_752_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_759_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_759_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_218_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_263_ce : STD_LOGIC;
    signal grp_fu_731_ce : STD_LOGIC;
    signal grp_fu_738_ce : STD_LOGIC;
    signal grp_fu_745_ce : STD_LOGIC;
    signal grp_fu_752_ce : STD_LOGIC;
    signal grp_fu_759_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_209_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_263_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_731_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_738_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_745_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_752_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_759_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mul_10ns_30ns_39_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component ISPPipeline_accel_mul_10ns_29s_39_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component ISPPipeline_accel_mul_mul_10ns_26s_36_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component ISPPipeline_accel_mul_mul_10ns_23s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component ISPPipeline_accel_mul_mul_10ns_24s_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_10ns_30ns_39_2_1_U370 : component ISPPipeline_accel_mul_10ns_30ns_39_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 30,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        ce => grp_fu_209_ce,
        dout => grp_fu_209_p2);

    mul_10ns_29s_39_2_1_U371 : component ISPPipeline_accel_mul_10ns_29s_39_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 29,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p2);

    mul_10ns_30ns_39_2_1_U372 : component ISPPipeline_accel_mul_10ns_30ns_39_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 30,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    mul_10ns_30ns_39_2_1_U373 : component ISPPipeline_accel_mul_10ns_30ns_39_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 10,
        din1_WIDTH => 30,
        dout_WIDTH => 39)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);

    mul_mul_10ns_26s_36_4_1_U374 : component ISPPipeline_accel_mul_mul_10ns_26s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 26,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_731_p0,
        din1 => grp_fu_731_p1,
        ce => grp_fu_731_ce,
        dout => grp_fu_731_p2);

    mul_mul_10ns_26s_36_4_1_U375 : component ISPPipeline_accel_mul_mul_10ns_26s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 26,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_738_p0,
        din1 => grp_fu_738_p1,
        ce => grp_fu_738_ce,
        dout => grp_fu_738_p2);

    mul_mul_10ns_23s_33_4_1_U376 : component ISPPipeline_accel_mul_mul_10ns_23s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 23,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_745_p0,
        din1 => grp_fu_745_p1,
        ce => grp_fu_745_ce,
        dout => grp_fu_745_p2);

    mul_mul_10ns_24s_34_4_1_U377 : component ISPPipeline_accel_mul_mul_10ns_24s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 24,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => grp_fu_752_p1,
        ce => grp_fu_752_ce,
        dout => grp_fu_752_p2);

    mul_mul_10ns_26s_36_4_1_U378 : component ISPPipeline_accel_mul_mul_10ns_26s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 26,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_759_p0,
        din1 => grp_fu_759_p1,
        ce => grp_fu_759_ce,
        dout => grp_fu_759_p2);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln245_fu_145_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_V_fu_114 <= j_V_2_fu_151_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_114 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                b_V_reg_787 <= ltm_in_data242_dout(29 downto 20);
                g_V_reg_782 <= ltm_in_data242_dout(19 downto 10);
                r_V_reg_777 <= r_V_fu_162_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                b_V_reg_787_pp0_iter2_reg <= b_V_reg_787;
                ret_V_12_reg_863 <= ret_V_12_fu_330_p2;
                ret_V_14_reg_878 <= ret_V_14_fu_429_p3;
                ret_V_15_reg_868 <= ret_V_15_fu_343_p2;
                ret_V_17_reg_883 <= ret_V_17_fu_503_p3;
                ret_V_18_reg_873 <= ret_V_18_fu_357_p2;
                ret_V_20_reg_888 <= ret_V_20_fu_577_p3;
                select_ln260_1_reg_913 <= select_ln260_1_fu_682_p3;
                select_ln260_2_reg_918 <= select_ln260_2_fu_715_p3;
                select_ln260_reg_908 <= select_ln260_fu_649_p3;
                tmp_10_reg_843 <= grp_fu_224_p2(38 downto 20);
                tmp_11_reg_853 <= grp_fu_745_p2(32 downto 20);
                tmp_14_reg_858 <= grp_fu_263_p2(38 downto 20);
                tmp_18_reg_893 <= ret_V_14_fu_429_p3(14 downto 10);
                tmp_20_reg_898 <= ret_V_17_fu_503_p3(14 downto 10);
                tmp_22_reg_903 <= ret_V_20_fu_577_p3(14 downto 10);
                tmp_3_reg_828 <= grp_fu_209_p2(38 downto 20);
                tmp_6_reg_833 <= grp_fu_218_p2(38 downto 20);
                tmp_8_reg_848 <= grp_fu_731_p2(35 downto 20);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ltm_in_data242_empty_n, lsc_out_data243_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((lsc_out_data243_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ltm_in_data242_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ltm_in_data242_empty_n, lsc_out_data243_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((lsc_out_data243_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ltm_in_data242_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ltm_in_data242_empty_n, lsc_out_data243_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((lsc_out_data243_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ltm_in_data242_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ltm_in_data242_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ltm_in_data242_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(lsc_out_data243_full_n)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (lsc_out_data243_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln245_fu_145_p2)
    begin
        if (((icmp_ln245_fu_145_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_V_fu_114, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_V_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_V_1 <= j_V_fu_114;
        end if; 
    end process;

    b_V_fu_176_p4 <= ltm_in_data242_dout(29 downto 20);
    g_V_fu_166_p4 <= ltm_in_data242_dout(19 downto 10);

    grp_fu_209_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_209_ce <= ap_const_logic_1;
        else 
            grp_fu_209_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_209_p0 <= grp_fu_209_p00(10 - 1 downto 0);
    grp_fu_209_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_777),39));
    grp_fu_209_p1 <= ap_const_lv39_1A916872(30 - 1 downto 0);

    grp_fu_218_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_218_ce <= ap_const_logic_1;
        else 
            grp_fu_218_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_218_p0 <= zext_ln1316_4_fu_215_p1(10 - 1 downto 0);
    grp_fu_218_p1 <= ap_const_lv39_7FF69930BE(29 - 1 downto 0);

    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_p0 <= zext_ln1316_4_fu_215_p1(10 - 1 downto 0);
    grp_fu_224_p1 <= ap_const_lv39_12205BC0(30 - 1 downto 0);

    grp_fu_263_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p0 <= grp_fu_263_p00(10 - 1 downto 0);
    grp_fu_263_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_reg_787_pp0_iter2_reg),39));
    grp_fu_263_p1 <= ap_const_lv39_11E631F8(30 - 1 downto 0);

    grp_fu_731_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_731_ce <= ap_const_logic_1;
        else 
            grp_fu_731_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_731_p0 <= grp_fu_731_p00(10 - 1 downto 0);
    grp_fu_731_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_fu_176_p4),36));
    grp_fu_731_p1 <= ap_const_lv36_FFED5CFAA(26 - 1 downto 0);

    grp_fu_738_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_738_ce <= ap_const_logic_1;
        else 
            grp_fu_738_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_738_p0 <= grp_fu_738_p00(10 - 1 downto 0);
    grp_fu_738_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_162_p1),36));
    grp_fu_738_p1 <= ap_const_lv36_FFE01A36E(26 - 1 downto 0);

    grp_fu_745_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_745_ce <= ap_const_logic_1;
        else 
            grp_fu_745_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_745_p0 <= grp_fu_745_p00(10 - 1 downto 0);
    grp_fu_745_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_fu_176_p4),33));
    grp_fu_745_p1 <= ap_const_lv33_1FFDE00D1(23 - 1 downto 0);

    grp_fu_752_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_752_ce <= ap_const_logic_1;
        else 
            grp_fu_752_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_752_p0 <= grp_fu_752_p00(10 - 1 downto 0);
    grp_fu_752_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_162_p1),34));
    grp_fu_752_p1 <= ap_const_lv34_3FFB573EA(24 - 1 downto 0);

    grp_fu_759_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_759_ce <= ap_const_logic_1;
        else 
            grp_fu_759_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_759_p0 <= grp_fu_759_p00(10 - 1 downto 0);
    grp_fu_759_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_fu_166_p4),36));
    grp_fu_759_p1 <= ap_const_lv36_FFE63F141(26 - 1 downto 0);
    icmp_ln1049_1_fu_483_p2 <= "1" when (tmp_2_fu_475_p3 = ap_const_lv28_0) else "0";
    icmp_ln1049_2_fu_557_p2 <= "1" when (tmp_4_fu_549_p3 = ap_const_lv28_0) else "0";
    icmp_ln1049_fu_409_p2 <= "1" when (tmp_fu_401_p3 = ap_const_lv28_0) else "0";
    icmp_ln245_fu_145_p2 <= "1" when (ap_sig_allocacmp_j_V_1 = width) else "0";
    icmp_ln97_1_fu_657_p2 <= "1" when (signed(tmp_20_reg_898) > signed(ap_const_lv5_0)) else "0";
    icmp_ln97_2_fu_690_p2 <= "1" when (signed(tmp_22_reg_903) > signed(ap_const_lv5_0)) else "0";
    icmp_ln97_fu_624_p2 <= "1" when (signed(tmp_18_reg_893) > signed(ap_const_lv5_0)) else "0";
    j_V_2_fu_151_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_1) + unsigned(ap_const_lv11_1));

    lsc_out_data243_blk_n_assign_proc : process(ap_enable_reg_pp0_iter7, lsc_out_data243_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            lsc_out_data243_blk_n <= lsc_out_data243_full_n;
        else 
            lsc_out_data243_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lsc_out_data243_din <= ((select_ln260_2_reg_918 & select_ln260_1_reg_913) & select_ln260_reg_908);

    lsc_out_data243_write_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            lsc_out_data243_write <= ap_const_logic_1;
        else 
            lsc_out_data243_write <= ap_const_logic_0;
        end if; 
    end process;


    ltm_in_data242_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ltm_in_data242_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ltm_in_data242_blk_n <= ltm_in_data242_empty_n;
        else 
            ltm_in_data242_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ltm_in_data242_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ltm_in_data242_read <= ap_const_logic_1;
        else 
            ltm_in_data242_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_463_p3 <= ret_V_16_fu_443_p2(21 downto 21);
    p_Result_2_fu_537_p3 <= ret_V_19_fu_517_p2(21 downto 21);
    p_Result_s_fu_389_p3 <= ret_V_13_fu_369_p2(21 downto 21);
    r_V_fu_162_p1 <= ltm_in_data242_dout(10 - 1 downto 0);
    ret_V_10_fu_563_p2 <= std_logic_vector(signed(sext_ln1048_2_fu_533_p1) + signed(ap_const_lv15_1));
    ret_V_12_fu_330_p2 <= std_logic_vector(signed(sext_ln1393_fu_327_p1) + signed(zext_ln1393_fu_324_p1));
    ret_V_13_fu_369_p2 <= std_logic_vector(signed(sext_ln1393_1_fu_363_p1) + signed(sext_ln1393_2_fu_366_p1));
    ret_V_14_fu_429_p3 <= 
        select_ln1048_fu_421_p3 when (p_Result_s_fu_389_p3(0) = '1') else 
        sext_ln1048_fu_385_p1;
    ret_V_15_fu_343_p2 <= std_logic_vector(unsigned(zext_ln1393_1_fu_340_p1) + unsigned(sext_ln1393_3_fu_336_p1));
    ret_V_16_fu_443_p2 <= std_logic_vector(signed(sext_ln1393_4_fu_437_p1) + signed(sext_ln1393_5_fu_440_p1));
    ret_V_17_fu_503_p3 <= 
        select_ln1048_1_fu_495_p3 when (p_Result_1_fu_463_p3(0) = '1') else 
        sext_ln1048_1_fu_459_p1;
    ret_V_18_fu_357_p2 <= std_logic_vector(signed(sext_ln1393_7_fu_353_p1) + signed(sext_ln1393_6_fu_349_p1));
    ret_V_19_fu_517_p2 <= std_logic_vector(signed(sext_ln1393_8_fu_511_p1) + signed(zext_ln1393_2_fu_514_p1));
    ret_V_20_fu_577_p3 <= 
        select_ln1048_2_fu_569_p3 when (p_Result_2_fu_537_p3(0) = '1') else 
        sext_ln1048_2_fu_533_p1;
    ret_V_6_fu_489_p2 <= std_logic_vector(signed(sext_ln1048_1_fu_459_p1) + signed(ap_const_lv15_1));
    ret_V_fu_415_p2 <= std_logic_vector(signed(sext_ln1048_fu_385_p1) + signed(ap_const_lv15_1));
    select_ln1048_1_fu_495_p3 <= 
        sext_ln1048_1_fu_459_p1 when (icmp_ln1049_1_fu_483_p2(0) = '1') else 
        ret_V_6_fu_489_p2;
    select_ln1048_2_fu_569_p3 <= 
        sext_ln1048_2_fu_533_p1 when (icmp_ln1049_2_fu_557_p2(0) = '1') else 
        ret_V_10_fu_563_p2;
    select_ln1048_fu_421_p3 <= 
        sext_ln1048_fu_385_p1 when (icmp_ln1049_fu_409_p2(0) = '1') else 
        ret_V_fu_415_p2;
    select_ln260_1_fu_682_p3 <= 
        ap_const_lv10_0 when (tmp_21_fu_670_p3(0) = '1') else 
        trunc_ln260_1_fu_678_p1;
    select_ln260_2_fu_715_p3 <= 
        ap_const_lv10_0 when (tmp_23_fu_703_p3(0) = '1') else 
        trunc_ln260_2_fu_711_p1;
    select_ln260_fu_649_p3 <= 
        ap_const_lv10_0 when (tmp_19_fu_637_p3(0) = '1') else 
        trunc_ln260_fu_645_p1;
    select_ln97_1_fu_662_p3 <= 
        ap_const_lv16_3FF when (icmp_ln97_1_fu_657_p2(0) = '1') else 
        sext_ln1029_1_fu_618_p1;
    select_ln97_2_fu_695_p3 <= 
        ap_const_lv16_3FF when (icmp_ln97_2_fu_690_p2(0) = '1') else 
        sext_ln1029_2_fu_621_p1;
    select_ln97_fu_629_p3 <= 
        ap_const_lv16_3FF when (icmp_ln97_fu_624_p2(0) = '1') else 
        sext_ln1029_fu_615_p1;
        sext_ln1029_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_17_reg_883),16));

        sext_ln1029_2_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_20_reg_888),16));

        sext_ln1029_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_reg_878),16));

        sext_ln1048_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_449_p4),15));

        sext_ln1048_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_523_p4),15));

        sext_ln1048_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_375_p4),15));

        sext_ln1393_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_12_reg_863),22));

        sext_ln1393_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_reg_848),22));

        sext_ln1393_3_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_278_p4),21));

        sext_ln1393_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_15_reg_868),22));

        sext_ln1393_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_853),22));

        sext_ln1393_6_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_296_p4),21));

        sext_ln1393_7_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_305_p4),21));

        sext_ln1393_8_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_18_reg_873),22));

        sext_ln1393_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_833),21));

    tmp_12_fu_296_p4 <= grp_fu_752_p2(33 downto 20);
    tmp_13_fu_305_p4 <= grp_fu_759_p2(35 downto 20);
    tmp_19_fu_637_p3 <= select_ln97_fu_629_p3(15 downto 15);
    tmp_1_fu_375_p4 <= ret_V_13_fu_369_p2(21 downto 8);
    tmp_21_fu_670_p3 <= select_ln97_1_fu_662_p3(15 downto 15);
    tmp_23_fu_703_p3 <= select_ln97_2_fu_695_p3(15 downto 15);
    tmp_2_fu_475_p3 <= (trunc_ln1049_1_fu_471_p1 & ap_const_lv20_0);
    tmp_4_fu_549_p3 <= (trunc_ln1049_2_fu_545_p1 & ap_const_lv20_0);
    tmp_5_fu_449_p4 <= ret_V_16_fu_443_p2(21 downto 8);
    tmp_7_fu_523_p4 <= ret_V_19_fu_517_p2(21 downto 8);
    tmp_9_fu_278_p4 <= grp_fu_738_p2(35 downto 20);
    tmp_fu_401_p3 <= (trunc_ln1049_fu_397_p1 & ap_const_lv20_0);
    trunc_ln1049_1_fu_471_p1 <= ret_V_16_fu_443_p2(8 - 1 downto 0);
    trunc_ln1049_2_fu_545_p1 <= ret_V_19_fu_517_p2(8 - 1 downto 0);
    trunc_ln1049_fu_397_p1 <= ret_V_13_fu_369_p2(8 - 1 downto 0);
    trunc_ln260_1_fu_678_p1 <= select_ln97_1_fu_662_p3(10 - 1 downto 0);
    trunc_ln260_2_fu_711_p1 <= select_ln97_2_fu_695_p3(10 - 1 downto 0);
    trunc_ln260_fu_645_p1 <= select_ln97_fu_629_p3(10 - 1 downto 0);
    zext_ln1316_4_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_782),39));
    zext_ln1393_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_843),21));
    zext_ln1393_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_858),22));
    zext_ln1393_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_828),21));
end behav;
