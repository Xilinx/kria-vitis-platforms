-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_AWBNormalizationkernel_Pipeline_VITIS_LOOP_319_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hist_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist_0_ce0 : OUT STD_LOGIC;
    hist_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist_1_ce0 : OUT STD_LOGIC;
    hist_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist_2_ce0 : OUT STD_LOGIC;
    hist_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    j : IN STD_LOGIC_VECTOR (1 downto 0);
    conv_i_i1584 : IN STD_LOGIC_VECTOR (26 downto 0);
    minValue_V_i : IN STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_o_ap_vld : OUT STD_LOGIC;
    minValue_V_4_i : IN STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_4_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_4_o_ap_vld : OUT STD_LOGIC;
    minValue_V_3_i : IN STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_3_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    minValue_V_3_o_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (17 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (17 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ISPPipeline_accel_AWBNormalizationkernel_Pipeline_VITIS_LOOP_319_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv18_3FFC0 : STD_LOGIC_VECTOR (17 downto 0) := "111111111111000000";
    constant ap_const_lv18_40 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal and_ln319_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal j_read_reg_404 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv_i_i1584_cast_fu_259_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal conv_i_i1584_cast_reg_410 : STD_LOGIC_VECTOR (32 downto 0);
    signal p1_V_1_reg_415 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_283_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal n1_V_2_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal and_ln319_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_V_2_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p1_V_2_reg_451 : STD_LOGIC_VECTOR (10 downto 0);
    signal minValue_V_read_reg_456 : STD_LOGIC_VECTOR (17 downto 0);
    signal minValue_V_3_read_reg_464 : STD_LOGIC_VECTOR (17 downto 0);
    signal minValue_V_4_read_reg_472 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1466_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minValue_V_1_fu_357_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal minValue_V_1_reg_484 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_empty_286_reg_175 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_286_reg_175 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_287_reg_190 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_287_reg_190 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_288_reg_205 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_288_reg_205 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_mux_empty_phi_fu_223_p6 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_220 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_mux_empty_284_phi_fu_236_p6 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_284_reg_233 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_mux_empty_285_phi_fu_249_p6 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_285_reg_246 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln587_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal lhs_V_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_V_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal p1_V_fu_78 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_p1_V_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal zext_ln232_23_fu_301_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln232_fu_297_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_304_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1073_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_343_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_378 : BOOLEAN;
    signal ap_condition_376 : BOOLEAN;
    signal ap_condition_385 : BOOLEAN;
    signal ap_condition_388 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ISPPipeline_accel_mux_32_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U262 : component ISPPipeline_accel_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => hist_0_q0,
        din1 => hist_1_q0,
        din2 => hist_2_q0,
        din3 => j,
        dout => rhs_V_fu_283_p5);

    mux_32_18_1_1_U263 : component ISPPipeline_accel_mux_32_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => minValue_V_read_reg_456,
        din1 => minValue_V_3_read_reg_464,
        din2 => minValue_V_4_read_reg_472,
        din3 => j,
        dout => tmp_7_fu_343_p5);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_286_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
                ap_phi_reg_pp0_iter1_empty_286_reg_175 <= ap_const_lv18_0;
            elsif ((((j_read_reg_404 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
                ap_phi_reg_pp0_iter1_empty_286_reg_175 <= minValue_V_4_read_reg_472;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_empty_286_reg_175 <= ap_phi_reg_pp0_iter0_empty_286_reg_175;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_287_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
                ap_phi_reg_pp0_iter1_empty_287_reg_190 <= minValue_V_3_read_reg_464;
            elsif (((j_read_reg_404 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
                ap_phi_reg_pp0_iter1_empty_287_reg_190 <= ap_const_lv18_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_empty_287_reg_190 <= ap_phi_reg_pp0_iter0_empty_287_reg_190;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_288_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((j_read_reg_404 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
                ap_phi_reg_pp0_iter1_empty_288_reg_205 <= ap_const_lv18_0;
            elsif (((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
                ap_phi_reg_pp0_iter1_empty_288_reg_205 <= minValue_V_read_reg_456;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_phi_reg_pp0_iter1_empty_288_reg_205 <= ap_phi_reg_pp0_iter0_empty_288_reg_205;
            end if; 
        end if;
    end process;

    lhs_V_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    lhs_V_fu_74 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    lhs_V_fu_74 <= n1_V_fu_339_p2;
                end if;
            end if; 
        end if;
    end process;

    p1_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p1_V_fu_78 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p1_V_fu_78 <= p1_V_2_reg_451;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                and_ln319_reg_447 <= and_ln319_fu_328_p2;
                n1_V_2_reg_442 <= lhs_V_fu_74;
                p1_V_2_reg_451 <= p1_V_2_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_i_i1584_cast_reg_410 <= conv_i_i1584_cast_fu_259_p1;
                p1_V_1_reg_415 <= ap_sig_allocacmp_p1_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln319_reg_447))) then
                minValue_V_1_reg_484 <= minValue_V_1_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_1 = and_ln319_fu_328_p2))) then
                minValue_V_3_read_reg_464 <= minValue_V_3_i;
                minValue_V_4_read_reg_472 <= minValue_V_4_i;
                minValue_V_read_reg_456 <= minValue_V_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                rhs_V_reg_436 <= rhs_V_fu_283_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln319_fu_328_p2 <= (xor_ln1073_fu_322_p2 and icmp_ln1073_fu_310_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_376_assign_proc : process(ap_enable_reg_pp0_iter1, j_read_reg_404, and_ln319_reg_447)
    begin
                ap_condition_376 <= ((j_read_reg_404 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln319_reg_447));
    end process;


    ap_condition_378_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1466_fu_351_p2, ap_block_pp0_stage0_01001)
    begin
                ap_condition_378 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1));
    end process;


    ap_condition_385_assign_proc : process(ap_enable_reg_pp0_iter1, j_read_reg_404, and_ln319_reg_447)
    begin
                ap_condition_385 <= (not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln319_reg_447));
    end process;


    ap_condition_388_assign_proc : process(ap_enable_reg_pp0_iter1, j_read_reg_404, and_ln319_reg_447)
    begin
                ap_condition_388 <= ((j_read_reg_404 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln319_reg_447));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, and_ln319_fu_328_p2)
    begin
        if (((ap_const_lv1_0 = and_ln319_fu_328_p2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_empty_284_phi_fu_236_p6_assign_proc : process(j_read_reg_404, and_ln319_reg_447, minValue_V_1_reg_484, ap_phi_reg_pp0_iter1_empty_287_reg_190, ap_phi_reg_pp0_iter1_empty_284_reg_233)
    begin
        if (((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            ap_phi_mux_empty_284_phi_fu_236_p6 <= ap_phi_reg_pp0_iter1_empty_287_reg_190;
        elsif (((j_read_reg_404 = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
            ap_phi_mux_empty_284_phi_fu_236_p6 <= minValue_V_1_reg_484;
        else 
            ap_phi_mux_empty_284_phi_fu_236_p6 <= ap_phi_reg_pp0_iter1_empty_284_reg_233;
        end if; 
    end process;


    ap_phi_mux_empty_285_phi_fu_249_p6_assign_proc : process(j_read_reg_404, and_ln319_reg_447, minValue_V_1_reg_484, ap_phi_reg_pp0_iter1_empty_288_reg_205, ap_phi_reg_pp0_iter1_empty_285_reg_246)
    begin
        if (((j_read_reg_404 = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
            ap_phi_mux_empty_285_phi_fu_249_p6 <= minValue_V_1_reg_484;
        elsif (((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            ap_phi_mux_empty_285_phi_fu_249_p6 <= ap_phi_reg_pp0_iter1_empty_288_reg_205;
        else 
            ap_phi_mux_empty_285_phi_fu_249_p6 <= ap_phi_reg_pp0_iter1_empty_285_reg_246;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_223_p6_assign_proc : process(j_read_reg_404, and_ln319_reg_447, minValue_V_1_reg_484, ap_phi_reg_pp0_iter1_empty_286_reg_175, ap_phi_reg_pp0_iter1_empty_reg_220)
    begin
        if ((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_lv1_1 = and_ln319_reg_447))) then 
            ap_phi_mux_empty_phi_fu_223_p6 <= minValue_V_1_reg_484;
        elsif ((((j_read_reg_404 = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            ap_phi_mux_empty_phi_fu_223_p6 <= ap_phi_reg_pp0_iter1_empty_286_reg_175;
        else 
            ap_phi_mux_empty_phi_fu_223_p6 <= ap_phi_reg_pp0_iter1_empty_reg_220;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_286_reg_175 <= "XXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_287_reg_190 <= "XXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_288_reg_205 <= "XXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_284_reg_233 <= "XXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_285_reg_246 <= "XXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_reg_220 <= "XXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p1_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p1_V_2_reg_451, ap_block_pp0_stage0, ap_loop_init, p1_V_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_p1_V_1 <= ap_const_lv11_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_p1_V_1 <= p1_V_2_reg_451;
            else 
                ap_sig_allocacmp_p1_V_1 <= p1_V_fu_78;
            end if;
        else 
            ap_sig_allocacmp_p1_V_1 <= p1_V_fu_78;
        end if; 
    end process;

        conv_i_i1584_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i1584),33));

    hist_0_address0 <= zext_ln587_fu_276_p1(10 - 1 downto 0);

    hist_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hist_0_ce0 <= ap_const_logic_1;
        else 
            hist_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hist_1_address0 <= zext_ln587_fu_276_p1(10 - 1 downto 0);

    hist_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hist_1_ce0 <= ap_const_logic_1;
        else 
            hist_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hist_2_address0 <= zext_ln587_fu_276_p1(10 - 1 downto 0);

    hist_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hist_2_ce0 <= ap_const_logic_1;
        else 
            hist_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1073_fu_310_p2 <= "1" when (unsigned(ret_V_fu_304_p2) < unsigned(conv_i_i1584_cast_reg_410)) else "0";
    icmp_ln1466_fu_351_p2 <= "1" when (tmp_7_fu_343_p5 = ap_const_lv18_3FFC0) else "0";
    j_read_reg_404 <= j;
    minValue_V_1_fu_357_p2 <= std_logic_vector(unsigned(tmp_7_fu_343_p5) + unsigned(ap_const_lv18_40));

    minValue_V_3_o_assign_proc : process(minValue_V_3_i, ap_CS_fsm_pp0_stage1, minValue_V_1_reg_484, ap_block_pp0_stage1_01001, ap_condition_378, ap_condition_376)
    begin
        if ((ap_const_boolean_1 = ap_condition_376)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                minValue_V_3_o <= minValue_V_1_reg_484;
            elsif ((ap_const_boolean_1 = ap_condition_378)) then 
                minValue_V_3_o <= ap_const_lv18_0;
            else 
                minValue_V_3_o <= minValue_V_3_i;
            end if;
        else 
            minValue_V_3_o <= minValue_V_3_i;
        end if; 
    end process;


    minValue_V_3_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_read_reg_404, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, and_ln319_reg_447, icmp_ln1466_fu_351_p2)
    begin
        if ((((j_read_reg_404 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            minValue_V_3_o_ap_vld <= ap_const_logic_1;
        else 
            minValue_V_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    minValue_V_4_o_assign_proc : process(minValue_V_4_i, ap_CS_fsm_pp0_stage1, minValue_V_1_reg_484, ap_block_pp0_stage1_01001, ap_condition_378, ap_condition_385)
    begin
        if ((ap_const_boolean_1 = ap_condition_385)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                minValue_V_4_o <= minValue_V_1_reg_484;
            elsif ((ap_const_boolean_1 = ap_condition_378)) then 
                minValue_V_4_o <= ap_const_lv18_0;
            else 
                minValue_V_4_o <= minValue_V_4_i;
            end if;
        else 
            minValue_V_4_o <= minValue_V_4_i;
        end if; 
    end process;


    minValue_V_4_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_read_reg_404, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, and_ln319_reg_447, icmp_ln1466_fu_351_p2)
    begin
        if (((not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln319_reg_447)) or (not((j_read_reg_404 = ap_const_lv2_0)) and not((j_read_reg_404 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            minValue_V_4_o_ap_vld <= ap_const_logic_1;
        else 
            minValue_V_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    minValue_V_o_assign_proc : process(minValue_V_i, ap_CS_fsm_pp0_stage1, minValue_V_1_reg_484, ap_block_pp0_stage1_01001, ap_condition_378, ap_condition_388)
    begin
        if ((ap_const_boolean_1 = ap_condition_388)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                minValue_V_o <= minValue_V_1_reg_484;
            elsif ((ap_const_boolean_1 = ap_condition_378)) then 
                minValue_V_o <= ap_const_lv18_0;
            else 
                minValue_V_o <= minValue_V_i;
            end if;
        else 
            minValue_V_o <= minValue_V_i;
        end if; 
    end process;


    minValue_V_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_read_reg_404, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, and_ln319_reg_447, icmp_ln1466_fu_351_p2)
    begin
        if ((((j_read_reg_404 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln319_reg_447)) or ((j_read_reg_404 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1466_fu_351_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln319_reg_447)))) then 
            minValue_V_o_ap_vld <= ap_const_logic_1;
        else 
            minValue_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    n1_V_fu_339_p2 <= std_logic_vector(unsigned(rhs_V_reg_436) + unsigned(n1_V_2_reg_442));
    p1_V_2_fu_334_p2 <= std_logic_vector(unsigned(p1_V_1_reg_415) + unsigned(ap_const_lv11_1));
    p_out <= ap_phi_mux_empty_phi_fu_223_p6;
    p_out1 <= ap_phi_mux_empty_284_phi_fu_236_p6;

    p_out1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= ap_phi_mux_empty_285_phi_fu_249_p6;

    p_out2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_304_p2 <= std_logic_vector(unsigned(zext_ln232_23_fu_301_p1) + unsigned(zext_ln232_fu_297_p1));
    tmp_fu_315_p3 <= p1_V_1_reg_415(10 downto 10);
    xor_ln1073_fu_322_p2 <= (tmp_fu_315_p3 xor ap_const_lv1_1);
    zext_ln232_23_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_reg_436),33));
    zext_ln232_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_74),33));
    zext_ln587_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_p1_V_1),64));
end behav;
